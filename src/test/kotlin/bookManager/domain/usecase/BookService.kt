package bookManager.domain.usecase

import io.kotest.core.spec.style.FunSpec
import io.kotest.matchers.collections.shouldContainExactly
import io.kotest.matchers.collections.shouldContainExactlyInAnyOrder
import io.kotest.assertions.throwables.shouldThrow
import bookManager.domain.model.Book
import bookManager.domain.port.BookRepository
import bookManager.domain.usecase.BookService
import io.kotest.property.Arb
import io.kotest.property.arbitrary.list
import io.kotest.property.arbitrary.string
import io.kotest.property.checkAll
import io.kotest.property.arbitrary.filter
import io.mockk.*


class BookServiceTest : FunSpec({

    val repository = mockk<BookRepository>(relaxUnitFun = true)
    val service = BookService(repository)

    val validStrings: Arb<String> = Arb.string(1..20).filter { s: String ->
        s.isNotBlank() && s.any { c -> !c.isWhitespace() }
    }

    test("ü¶Ñ ajoute un livre via le d√©p√¥t") {
        println("ü¶Ñ Ajout d'un livre en cours... ‚úçÔ∏è")
        val book = Book("1984", "George Orwell")
        coEvery { repository.save(book) } returns book

        service.addBook(book)

        coVerify { repository.save(book) }
        println("‚úÖ Livre ajout√© avec succ√®s ! üìò‚ú®")
    }


    test("ü¶Ñ retourne tous les livres tri√©s par titre") {
        println("ü¶Ñ Test de tri magique des livres üìöüî§")
        val books = listOf(
            Book("Zebra Book", "Author Z"),
            Book("Apple Book", "Author A"),
            Book("Mango Book", "Author M")
        )
        every { repository.findAll() } returns books

        val result = service.getAllBooksSorted()

        result shouldContainExactly listOf(
            Book("Apple Book", "Author A"),
            Book("Mango Book", "Author M"),
            Book("Zebra Book", "Author Z")
        )
        println("‚úÖ Tri alphab√©tique parfait üåàüìñ")
    }

    test("ü¶Ñ la liste retourn√©e contient tous les livres stock√©s (test de propri√©t√©)") {
        println("üß™ Test de propri√©t√© magique : correspondance parfaite üßô‚Äç‚ôÇÔ∏è")

        checkAll(5,Arb.list(validStrings, 1..10), Arb.list(validStrings, 1..10)) { titles, authors ->
            val books = titles.zip(authors).map { (t, a) -> Book(t, a) }
            every { repository.findAll() } returns books
            val result = service.getAllBooksSorted()
            result shouldContainExactlyInAnyOrder books

            println("ü¶Ñ ${books.size} livres v√©rifi√©s avec succ√®s üåüüìö")
        }
    }

    test("ü¶Ñ les livres sont tri√©s par titre (ordre alphab√©tique)") {
        println("üî† V√©rification de l‚Äôordre magique des titres ‚ú®")

        checkAll(5,Arb.list(validStrings, 1..10), Arb.list(validStrings, 1..10)) { titles, authors ->
            val books = titles.zip(authors).map { (t, a) -> Book(t, a) }
            every { repository.findAll() } returns books
            val result = service.getAllBooksSorted()
            val expected = books.sortedBy { it.title }

            result shouldContainExactly expected

            println("üìö ${books.size} livres bien tri√©s par ordre alphab√©tique üåà")
        }
    }

    test("ü¶Ñ la liste tri√©e contient exactement les m√™mes livres que la liste initiale") {
        println("ü¶Ñ Test de propri√©t√© : int√©grit√© de la liste apr√®s tri ‚ú®")

        checkAll(5,Arb.list(validStrings, 1..10), Arb.list(validStrings, 1..10)) { titles, authors ->
            val books = titles.zip(authors).map { (t, a) -> Book(t, a) }
            val sorted = books.sortedBy { it.title }

            sorted shouldContainExactlyInAnyOrder books

            println("üåü ${books.size} livres tri√©s sans perte de magie ü¶Ñ")
        }
    }

    test("ü¶Ñ r√©serve un livre non r√©serv√© avec succ√®s") {
        val book = Book("Dune", "Frank Herbert", isReserved = false)

        every { repository.findByTitle("Dune") } returns book
        every { repository.save(match { it.title == "Dune" && it.isReserved }) } returns book.copy(isReserved = true)

        service.reserveBook("Dune")

        verify { repository.findByTitle("Dune") }
        verify { repository.save(match { it.title == "Dune" && it.isReserved }) }

        println("üìò Livre r√©serv√© avec succ√®s üåü")
    }

    test("üõë r√©server un livre inexistant l√®ve une exception") {
        every { repository.findByTitle("Fant√¥me") } returns null

        shouldThrow<IllegalArgumentException> {
            service.reserveBook("Fant√¥me")
        }

        verify { repository.findByTitle("Fant√¥me") }
        println("‚ùó Livre introuvable d√©tect√© avec succ√®s üö®")
    }

    test("‚ö†Ô∏è r√©server un livre d√©j√† r√©serv√© l√®ve une exception") {
        val reservedBook = Book("Dune", "Frank Herbert", isReserved = true)

        every { repository.findByTitle("Dune") } returns reservedBook

        shouldThrow<IllegalStateException> {
            service.reserveBook("Dune")
        }

        verify { repository.findByTitle("Dune") }
        println("üö´ R√©servation doublon d√©tect√©e avec succ√®s ‚ùå")
    }



})
